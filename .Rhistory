?rnorm
q()
q()
a<-available.packages()
head(rownames(a), 3)
head(rownames(a), 10)
?install.packages
library(stats)
search()
library(devtools)
q()
install.package("KernSmooth")
install.packages("KernSmooth")
library(KernSmooth)
q()
q()
my_matrix >- matrix(c(c2, 1), c(5, 3)), 2, 2)
my_matrix <- matrix(c(c2, 1), c(5, 3)), 2, 2)
my_matrix <- matrix(c(c(2, 1), c(5, 3)), 2, 2)
identity_matrix <- diag(nrow(my_matrix))
inverted_matrix <- solve(my_matrix, identity_matrix)
x <- matrix()
class(x=)
class(x)
x
x <- NULL
class(x)
x <- matrix()
is.null(x)
nrow(x)
is.empty(x)
x
x <- my_matrix
x
inverted_matrix <- solve(x, diag(nrow(x)), ...)
?solve
inverted_matrix <- solve(x, diag(nrow(x)))
inverted_matrix
makeCacheMatrix <- function(x = matrix()) {
inverted_matrix <- NULL
set <- function(y) {
x <<- y
inverted_matrix <<- NULL
}
get <- function() x
setinverse <- function(inverse) inverted_matrix <<- inverse
getinverse <- function() inverted_matrix
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
x <- makeCacheMatrix
x
a <- matrix(c(c2, 1), c(5, 3)), 2, 2)
a <- matrix(c(c(2, 1), c(5, 3)), 2, 2)
makeCacheMatrix(a=)
makeCacheMatrix(a)
a
b <- makeCacheMatrix(a)
b
get(b)
b$get
b$get()
b$getinverse()
cacheSolve <- function(x, ...) {
inverted_matrix <- x$getinverse()
if(!is.null(inverted_matrix)) {
message("getting cached data")
return(inverted_matrix)
}
data <- x$get()
inverted_matrix <- solve(x, diag(nrow(x)), ...)
x$setinverse(inverted_matrix)
inverted_matrix
}
cacheSolve(b)
b
cacheSolve(b$get())
cacheSolve(b
)
cacheSolve <- function(x, ...) {
inverted_matrix <- x$getinverse()
if(!is.null(inverted_matrix)) {
message("getting cached data")
return(inverted_matrix)
}
data <- x$get()
inverted_matrix <- solve(data, diag(nrow(data)), ...)
x$setinverse(inverted_matrix)
inverted_matrix
}
b <- makeCacheMatrix(a)
cacheSolve(b)
cacheSolve(b)
cacheSolve(a)
cacheSolve(b)
rm(a, b, identity_matrix, inverted_matrix, cacheSolve, makeCacheMatrix, x)
rm(a, b, identity_matrix, inverted_matrix, cacheSolve, makeCacheMatrix, x, my_matrix)
makeCacheMatrix <- function(x = matrix()) {
inverted_matrix <- NULL
set <- function(y) {
x <<- y
inverted_matrix <<- NULL
}
get <- function() x
setinverse <- function(inverse) inverted_matrix <<- inverse
getinverse <- function() inverted_matrix
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
cacheSolve <- function(x, ...) {
inverted_matrix <- x$getinverse()
if(!is.null(inverted_matrix)) {
message("getting cached data")
return(inverted_matrix)
}
data <- x$get()
inverted_matrix <- solve(data, diag(nrow(data)), ...)
x$setinverse(inverted_matrix)
inverted_matrix
}
a <- makeCacheMatrix(matrix(c(c(2, 1), c(5, 3))))
a$get()
rm(a)
a <- makeCacheMatrix(matrix(c(c(2, 1), c(5, 3))), 2, 2)
a <- makeCacheMatrix(matrix(c(c(2, 1), c(5, 3)), 2, 2))
a$get()
a$set(matrix(c(c(2, 1), c(5, 3)), 2, 2))
a$set(matrix(c(c(3, 1), c(5, 3)), 2, 2))
a$get()
a$list()
a$list
a$list()
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
c <- makeVector(c(1, 2, 3))
c$list
c$list()
rm(makeVector)
makeVector <- function(x = numeric()) {
+     m <- NULL
+     set <- function(y) {
+         x <<- y
+         m <<- NULL
+     }
+     get <- function() x
+     setmean <- function(mean) m <<- mean
+     getmean <- function() m
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
}
c <- makeVector(c(1, 2, 3))
c$get()
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(get=get)
}
c <- makeVector(c(1, 2, 3))
c$get()
c$getmean()
rm(c, makeVector)
rm(get)
a
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(get=get)
}
c <- makeVector(c(1, 2, 3))
c
rm(c, makeVector)
a
a$get()
cacheSolve(a)
cacheSolve(a)
b <- matrix(1:4, 2, 2)
cacheSolve(b)
b <- makeCacheMatrix(b)
cacheSolve(b)
b
b$get()
class(b)
class(b$get())
makeCacheMatrix(b)
b
b$get()
b <- matrix(1:4, 2, 2)
c <- makeCacheMatrix(b)
c$get()
cacheSolve(c)
b <- matrix(1:9, 3, 3)
c <-makeCacheMatrix(b)
cacheSolve(c)
b
solve(matrix(1:9, 3, 3), diag(3))
b <- matrix(c(c(1, 2, 2), c(2, 4, 1), c(0, 1, 0)), 3, 3)
b
c <-makeCacheMatrix(b)
cacheSolve(c)
cacheSolve(c)
class(c)
c$getinverse()
rm(c)
c <-makeCacheMatrix(b)
c$getinverse()
cacheSolve(c)
c$getinverse()
?return
source('~/.active-rstudio-document')
dies_ist_ein_test(2)
dies_ist_ein_test(6)
dies_ist_ein_test(6)
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
dies_ist_ein_test(6)
dies_ist_ein_test(3)
dies_ist_ein_test(2)
getwd()
setwd"/Users/gh1/Silvia/ProgrammingAssignment2"
setwd("/Users/gh1/Silvia/ProgrammingAssignment2")
source('~/silvia/ProgrammingAssignment2/cachematrix.R')
my_matrix <- makeCacheMatrix(c(c(2,1), c(3,5),2,2))
cacheSolve(my_matrix)
my_matrix
my_matrix$get()
mr(my_matrix)
rm(my_matrix)
my_matrix <- makeCacheMatrix(c(c(2,1), c(3,5)), 2,2)
my_matrix <- makeCacheMatrix(c(c(2,1), c(3,5)), 2,2))
my_matrix <- makeCacheMatrix(matrix(c(c(2,1), c(3,5)), 2,2))
cacheSolve(my_matrix)
cacheSolve(my_matrix)
q()
